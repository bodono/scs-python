---
name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==1.7.1
      - name: Build wheels
        run: |
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "cp27-* cp34-* pp* cp39* *win32"
          CIBW_BEFORE_ALL_LINUX: "yum install -y openblas-devel liblapack-dev"
          CIBW_BEFORE_ALL_MACOS: "brew install openblas lapack"
          CIBW_BEFORE_BUILD_WINDOWS: "pip install -U numpy scipy"
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux2010_x86_64:latest
          CIBW_MANYLINUX_I686_IMAGE: quay.io/pypa/manylinux2010_i686:latest
          CIBW_TEST_COMMAND: "nosetests {project}/test"
          CIBW_TEST_REQUIRES: nose
          CIBW_ENVIRONMENT_WINDOWS: "BLAS_LAPACK_LIB_PATHS={project}/openblaslib CC=gcc USE_LAPACK=1"
      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
  build_wheels_windows:
    name: Build wheels on windows Python-${{ matrix.python-version }} ${{ matrix.arch }}
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, x86]
        python-version: [3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: conda-incubator/setup-miniconda@v2
        if: matrix.arch == 'x64'
        with:
          activate-environment: scs
          auto-update-conda: true
          channels: conda-forge
          python-version: ${{ matrix.python-version }}
      - uses: conda-incubator/setup-miniconda@v2
        if: matrix.arch == 'x86'
        with:
          activate-environment: scs
          miniconda-version: "latest"
          auto-update-conda: true
          channels: conda-forge
          python-version: ${{ matrix.python-version }}
          architecture: x86
      - name: Install Deps
        run: conda install numpy scipy nose
      - name: Build Wheel
        if: matrix.arch == 'x64'
        run: python setup.py bdist_wheel --scs 'CC="gcc.exe -m64" USE_LAPACK=1 BLASLDFLAGS="-Lopenblaslib -lopenblas"'
      - name: Build Wheel
        if: matrix.arch == 'x86'
        run: python setup.py bdist_wheel --scs 'CC="gcc.exe -m32" USE_LAPACK=1 BLASLDFLAGS="-Lopenblaslib -lopenblas"'
      - name: Run tests
        shell: bash -l {0}
        run: |
          set -e
          conda create -y -n test-env python=${{ matrix.python-version }}
          source activate test-env
          pip install dist/*whl
          pip install nose
          nosetests test
        if: matrix.arch == 'x64'
      - name: Run tests
        shell: bash -l {0}
        run: |
          set -e
          conda create -y -n test-env python=${{ matrix.python-version }}
          source activate test-env
          pip install dist/*whl
          pip install nose
          nosetests test
        env:
          CONDA_FORCE_32BIT: 1
        if: matrix.arch == 'x86'
      - uses: actions/upload-artifact@v2
        with:
          path: ./dist/*.whl
